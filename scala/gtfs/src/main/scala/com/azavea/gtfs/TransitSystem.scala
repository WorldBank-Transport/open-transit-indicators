package com.azavea.gtfs

/** Represents a scheduled transit system.
    Generated by the TransitSystemFactory
    that generates the schedules between a start
    time and an end time. */
trait TransitSystem {
  def routes: Seq[Route]
}

object TransitSystem {
  def merge(systems: Seq[TransitSystem]): TransitSystem = {
    val mergedRoutes: Seq[Route] = 
      systems
        .flatMap(_.routes)
        .groupBy(_.id)
        .map { case (routeId, routes) =>
          val tokenRoute = routes.head
          val mergedTrips = 
            routes
              .flatMap(_.trips)
              .groupBy { trip => (trip.id, trip.schedule.head.arrivalTime) }
              .map(_._2.head)
              .toSeq

          new Route {
            def id = tokenRoute.id
            def shortName = tokenRoute.shortName
            def longName = tokenRoute.longName
            def description = tokenRoute.description
            def url = tokenRoute.url
            def color = tokenRoute.color
            def textColor = tokenRoute.textColor
            def routeType = tokenRoute.routeType
            def agency = tokenRoute.agency

            def trips = mergedTrips
          }
         }
        .toSeq

    new TransitSystem {
      def routes: Seq[Route] = mergedRoutes
    }
  }
}
